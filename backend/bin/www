#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var io = require('../routes/socket-api');
var debug = require('debug')('gliagencyserver:server');
var http = require('http');
var https = require("https");
var config = require("../config");
var nodeStatic = require('node-static');
/**
 * Get port from environment and store in Express.
 */

const httpPort = 80;
const httpsPort = 443;
var port = normalizePort(httpPort || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var file = new nodeStatic.Server('bin', { // bin is the folder containing our html, etc
  cache: 0,	// don't cache
  gzip: true	// gzip our assets
});

var server = http.createServer(app, function (request, response) {
  request.addListener('end', function () {
    file.serve(request, response);
  });
  request.resume();
});

io.startSocketServer(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
//io.serveClient(true);
//io.attach(server)
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create HTTPS server.
 */

// required parameters for https
const secureOptions = {
  key: config.key,
  cert: config.cert,
};

//app.listen(httpPort);
https.createServer(secureOptions, app).listen(httpsPort);

server.on('connection', function (socket) {
  socket.setTimeout(5 * 1000);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
